// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mock

import (
	models "CQRS-simple/pkg/models"

	mock "github.com/stretchr/testify/mock"
)

// DBInterface is an autogenerated mock type for the DBInterface type
type DBInterface struct {
	mock.Mock
}

// CreatePost provides a mock function with given fields: p
func (_m *DBInterface) CreatePost(p models.Post) (models.Post, error) {
	ret := _m.Called(p)

	var r0 models.Post
	if rf, ok := ret.Get(0).(func(models.Post) models.Post); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Get(0).(models.Post)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.Post) error); ok {
		r1 = rf(p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: u
func (_m *DBInterface) CreateUser(u models.User) (models.User, error) {
	ret := _m.Called(u)

	var r0 models.User
	if rf, ok := ret.Get(0).(func(models.User) models.User); ok {
		r0 = rf(u)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.User) error); ok {
		r1 = rf(u)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePost provides a mock function with given fields: id
func (_m *DBInterface) DeletePost(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUser provides a mock function with given fields: id
func (_m *DBInterface) DeleteUser(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllUsers provides a mock function with given fields:
func (_m *DBInterface) GetAllUsers() (*[]models.User, error) {
	ret := _m.Called()

	var r0 *[]models.User
	if rf, ok := ret.Get(0).(func() *[]models.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPostRead provides a mock function with given fields: id
func (_m *DBInterface) GetPostRead(id string) (models.Read, error) {
	ret := _m.Called(id)

	var r0 models.Read
	if rf, ok := ret.Get(0).(func(string) models.Read); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.Read)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPosts provides a mock function with given fields: userID
func (_m *DBInterface) GetPosts(userID string) ([]models.PostRead, error) {
	ret := _m.Called(userID)

	var r0 []models.PostRead
	if rf, ok := ret.Get(0).(func(string) []models.PostRead); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.PostRead)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: id
func (_m *DBInterface) GetUser(id string) (models.Read, error) {
	ret := _m.Called(id)

	var r0 models.Read
	if rf, ok := ret.Get(0).(func(string) models.Read); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.Read)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePost provides a mock function with given fields: p
func (_m *DBInterface) UpdatePost(p models.Post) (models.Post, error) {
	ret := _m.Called(p)

	var r0 models.Post
	if rf, ok := ret.Get(0).(func(models.Post) models.Post); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Get(0).(models.Post)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.Post) error); ok {
		r1 = rf(p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: u
func (_m *DBInterface) UpdateUser(u models.User) (models.User, error) {
	ret := _m.Called(u)

	var r0 models.User
	if rf, ok := ret.Get(0).(func(models.User) models.User); ok {
		r0 = rf(u)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.User) error); ok {
		r1 = rf(u)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
