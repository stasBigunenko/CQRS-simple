// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	models "CQRS-simple/pkg/models"

	mock "github.com/stretchr/testify/mock"
)

// RedisDBInterface is an autogenerated mock type for the RedisDBInterface type
type RedisDBInterface struct {
	mock.Mock
}

// CreatePost provides a mock function with given fields: ur
func (_m *RedisDBInterface) CreatePost(ur models.Post) (models.PostRead, error) {
	ret := _m.Called(ur)

	var r0 models.PostRead
	if rf, ok := ret.Get(0).(func(models.Post) models.PostRead); ok {
		r0 = rf(ur)
	} else {
		r0 = ret.Get(0).(models.PostRead)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.Post) error); ok {
		r1 = rf(ur)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: ur
func (_m *RedisDBInterface) CreateUser(ur models.Read) (models.User, error) {
	ret := _m.Called(ur)

	var r0 models.User
	if rf, ok := ret.Get(0).(func(models.Read) models.User); ok {
		r0 = rf(ur)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.Read) error); ok {
		r1 = rf(ur)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePost provides a mock function with given fields: id, userID
func (_m *RedisDBInterface) DeletePost(id string, userID string) error {
	ret := _m.Called(id, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(id, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUser provides a mock function with given fields: id
func (_m *RedisDBInterface) DeleteUser(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Exist provides a mock function with given fields: id
func (_m *RedisDBInterface) Exist(id string) bool {
	ret := _m.Called(id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetAllUsers provides a mock function with given fields:
func (_m *RedisDBInterface) GetAllUsers() (*[]models.User, error) {
	ret := _m.Called()

	var r0 *[]models.User
	if rf, ok := ret.Get(0).(func() *[]models.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserPosts provides a mock function with given fields: id
func (_m *RedisDBInterface) GetUserPosts(id string) (models.UserPosts, error) {
	ret := _m.Called(id)

	var r0 models.UserPosts
	if rf, ok := ret.Get(0).(func(string) models.UserPosts); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.UserPosts)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePost provides a mock function with given fields: p
func (_m *RedisDBInterface) UpdatePost(p models.Post) error {
	ret := _m.Called(p)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Post) error); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUser provides a mock function with given fields: u
func (_m *RedisDBInterface) UpdateUser(u models.User) error {
	ret := _m.Called(u)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.User) error); ok {
		r0 = rf(u)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
